import React, { useState } from "react";
import SongTile from "./SongTile";

function GenerateSpomodoro() {
  const [song, setSong] = useState("");
  const [songs, setSongs] = useState([]);
  const [selected, setSelected] = useState();
  let accessToken = localStorage.getItem("access-token");

  const handleChange = async (e) => {
    setSong(e.target.value);
    if (song) {
      const response = await fetch(
        `https://api.spotify.com/v1/search?q=${song}&type=track&limit=5`,
        {
          headers: {
            Authorization: "Bearer " + accessToken,
          },
        }
      );
      const data = await response.json();
      setSongs(data.tracks.items);
    } else {
      setSongs([]);
    }
  };

  const handleClick = async () => {
    let accessToken = localStorage.getItem("access-token");
    console.log(selected);

    let args = new URLSearchParams({
      seed_genres: "",
      seed_artists: "",
      seed_tracks: selected.id,
    });

    console.log("https://api.spotify.com/v1/recommendations?" + args);

    const response = await fetch(
      "https://api.spotify.com/v1/recommendations?" + args,
      {
        headers: {
          Authorization: "Bearer " + accessToken,
        },
      }
    );

    const data = await response.json();
    const songNumber = calculateSpom(data.tracks);
    createPlaylist(songNumber, data.tracks);
  };

  const calculateSpom = (tracks) => {
    console.log(tracks);
    let total_time = 0;
    let diff = 1500000;
    let closestIndex = 0;
    for (var i = 0; i < tracks.length; i++) {
      total_time += tracks[i].duration_ms;
      let durationDiff = Math.abs(total_time - 1500000);
      if (durationDiff < diff) {
        diff = durationDiff;
        closestIndex = i;
      }

      if (total_time >= 1500000) {
        break;
      }
    }

    return closestIndex;
  };

  const createPlaylist = async (songNumber, tracks) => {
    const fetchUsername = async () => {
      let accessToken = localStorage.getItem("access-token");

      const response = await fetch("https://api.spotify.com/v1/me", {
        headers: {
          Authorization: "Bearer " + accessToken,
        },
      });

      const data = await response.json();
      return data.id;
    };

    let accessToken = localStorage.getItem("access-token");

    const username = await fetchUsername();
    let body = new URLSearchParams();

    const response = await fetch(
      `https://api.spotify.com/v1/users/${username}/playlists`,
      {
        method: "POST",
        headers: {
          Authorization: "Bearer " + accessToken,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: "Spomodoro",
          description:
            "This playlist was generated by using the Spomodoro App.",
          public: false,
        }),
      }
    );

    const data = await response.json();
    console.log(data);

    const song_uris = [];
    for (var i = 0; i < songNumber + 1; i++) {
      song_uris[i] = tracks[i].uri;
    }

    const response1 = await fetch(
      `https://api.spotify.com/v1/playlists/${data.id}/tracks`,
      {
        method: "POST",
        headers: {
          Authorization: "Bearer " + accessToken,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          uris: song_uris,
        }),
      }
    );

    const data1 = await response1.json();
    console.log(data1);
  };

  const handleTileClick = (song) => {
    setSelected(song);
  };

  return (
    <div>
      <input
        onChange={handleChange}
        placeholder="Select a song to generate a Spomodoro Playlist..."
        className="rounded p-2 mt-10 w-96 bg-neutral-800 border-2 border-neutral-600 hover:border-white text-white placeholder:text-neutral-60"
      />
      <div className="flex mt-10">
        {songs.map((song) => (
          <SongTile
            song={song}
            handleTileClick={handleTileClick}
            selected={selected}
          />
        ))}
      </div>
      {selected ? (
        <div className="flex ">
          <div className="bg-neutral-600 rounded-lg m-5 h-20 p-5">
            <h1 className="text-white">{selected.name}</h1>
            <p className="text-gray-400 text-sm mb-4">
              {selected?.artists[0].name}
            </p>
          </div>
          <button
            className="bg-green-500 rounded-lg p-5 w-4/5 m-5 text-white font-semibold"
            onClick={handleClick}
          >
            Generate 25 minute Spomodoro Playlist
          </button>
        </div>
      ) : (
        <div>Please select song for Spomodoro</div>
      )}
    </div>
  );
}

export default GenerateSpomodoro;
